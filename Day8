•	List down all the error types and check all the errors using a py-thon program for all errors

i) divide by zero:

try:
  print(1/0)
except:
  raise Exception("numbers can't be divisible by zero")
  
ii) index error:

inp=[1,2,3]
try:
  print(inp[4])
except:
  print("array's index is out of bound")

iii) type error:

inp="Python:"
try:
  inp[0]='T'
except:
  raise Exception("string types are immutable")
  
iv) name error:

inp = "Python"
try:
  print(b)
except:
  print("Name is not defined")
  

•	Design a simple calculator app with try and except for all use cases

try:
    num1 = int(input("First Number:"))
    num2 = int(input("Second Number:"))
    oper = input("Enter Arithmetic Operator:")
    if oper == '+':
        print('{0}+{1}={2}'.format(num1,num2,num1+num2))
    elif oper == '-':
        print('{0}+{1}={2}'.format(num1,num2,num1-num2))
    elif oper == '*':
        print('{0}+{1}={2}'.format(num1,num2,num1*num2))
    elif oper == '/':
        try:
            print('{0}+{1}={2}'.format(num1,num2,num1/num2))
        except ZeroDivisionError:
            print("integer division by zero")
    elif oper == '%':
        print('{0}+{1}={2}'.format(num1,num2,num1%num2))
    else:
        print("Invalid Operator")
except:
    raise Exception("Invalid Input")
    
    

•	print one message if the try block raises a NameError and another for other errors

try:
	print(inp)
except NameError:
	print("inp is not defined")
except:
	raise Exception(self)
 
•	When try-except scenario is not required?

   When the user input is clear according to the requirement as well as test case then at the time we don't required the try-expect block.

•	Try getting an input inside the try catch block

while True:
    try:
        n = input("Please enter an integer: ")
        n = int(n)
        break
    except ValueError:
        print("No valid integer! Please try again")
print("Great,successfully entered an integer!")
